apiVersion: apps/v1
kind: Deployment
metadata:
  name: photoapp
spec:
  selector:
    matchLabels:
      app: photoapp
  replicas: 3
  template:
    metadata:
      labels:
        app: photoapp
    spec:
      containers:
        - image: ravindrasingh6969/nodeapp:latest
          name: photoapp
          ports:
            - containerPort: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: photoapp
spec:
  ports:
    - port: 80 #service port  #kubeproxy will open port on worker node to which can route traffic to alb
      targetPort: 8080 #container port
      protocol: TCP
  type: ClusterIP
  selector:
    app: photoapp
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: photoapp
  annotations:
    # AWS-specific annotations for SSL and the load balancer
    alb.ingress.kubernetes.io/scheme: "internet-facing"
    alb.ingress.kubernetes.io/target-type: "ip"
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    alb.ingress.kubernetes.io/certificate-arn: "arn:aws:acm:us-east-1:590183794320:certificate/5d26b54c-8a4e-4764-bef5-5f3dd97300f9"
    alb.ingress.kubernetes.io/ssl-redirect: "443"
spec:
  ingressClassName: nginx
  rules:
    - host: myapp.stackfood.com.br
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: photoapp
                port:
                  number: 80
          - path: /ping
            pathType: Prefix
            backend:
              service:
                name: photoapp
                port:
                  number: 80
          - path: /metrics
            pathType: Prefix
            backend:
              service:
                name: photoapp
                port:
                  number: 80
          - path: /error
            pathType: Prefix
            backend:
              service:
                name: photoapp
                port:
                  number: 80
