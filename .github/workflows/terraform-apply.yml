name: "AWS / PROD / Terraform Apply"

on:
  workflow_dispatch:

env:
  BACKEND_S3_BUCKET: ${{ vars.BACKEND_S3_BUCKET }}
  BACKEND_S3_KEY: ${{ vars.BACKEND_S3_KEY }}
jobs:
  plan_and_apply:
    name: Plan and Apply
    runs-on: ubuntu-22.04
    environment:
      name: Production
    defaults:
      run:
        working-directory: ./terraform/aws/main

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Substitua pela sua regiÃ£o
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
      - name: Verify AWS Identity
        run: aws sts get-caller-identity
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Initialise Terraform
        run: terraform init -input=false
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_WORKSPACE: "Production"

      - name: Terraform Plan
        id: plan
        run: |
          terraform plan -var-file="../env/prod.tfvars" -var="cloudflare_api_token=$CLOUDFLARE_API_TOKEN" -var="backend_s3_bucket=$BACKEND_S3_BUCKET" -var="backend_s3_key=$BACKEND_S3_KEY" -input=false -no-color -out=tfplan
          terraform show -no-color tfplan
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_WORKSPACE: "Production"
          BACKEND_S3_BUCKET: ${{ vars.BACKEND_S3_BUCKET }}
          BACKEND_S3_KEY: ${{ vars.BACKEND_S3_KEY }}

      - name: Create artifacts directory
        if: always()
        run: mkdir -p ../../../artifacts

      - name: Save Plan Output
        if: always()
        run: |
          if [ -f tfplan ]; then
            terraform show -no-color tfplan > ../../../artifacts/terraform-plan.txt
          fi
          echo "Plan status: ${{ steps.plan.outcome }}" > ../../../artifacts/plan-summary.txt

      - name: Upload Plan Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan-${{ github.run_id }}
          path: artifacts/
          retention-days: 15

      - name: Terraform Apply
        if: steps.plan.outcome == 'success'
        id: apply
        run: terraform apply -var-file="../env/prod.tfvars" -var="cloudflare_api_token=$CLOUDFLARE_API_TOKEN" -var="backend_s3_bucket=$BACKEND_S3_BUCKET" -var="backend_s3_key=$BACKEND_S3_KEY" -auto-approve -input=false -no-color tfplan
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          TF_WORKSPACE: "Production"
          BACKEND_S3_BUCKET: ${{ vars.BACKEND_S3_BUCKET }}
          BACKEND_S3_KEY: ${{ vars.BACKEND_S3_KEY }}

      - name: Post Plan Failure
        if: steps.plan.outcome == 'failure'
        uses: mshick/add-pr-comment@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          message: |
            Terraform Plan **FAILED** (Production):
            ```
            ${{ steps.plan.outputs.stderr }}
            ```
      - name: Post Apply Failure
        if: steps.apply.outcome == 'failure'
        uses: mshick/add-pr-comment@v2
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
          message: |
            Terraform Apply **Failed** (Production):
            ```
            ${{ steps.apply.outputs.stderr }}
            ```
